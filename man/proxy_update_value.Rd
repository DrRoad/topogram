% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny.R
\name{proxy_update_value}
\alias{proxy_update_value}
\title{Update variable used to distort topology with proxy}
\usage{
proxy_update_value(proxy, new_value, legend_title = NULL)
}
\arguments{
\item{proxy}{A \code{topogramProxy} \code{htmlwidget} object.}

\item{new_value}{New variable to use, must a \code{character} of length one,
and a valid variable name of data used to construct the cartogram.}

\item{legend_title}{New title for the legend.}
}
\value{
A \code{topogramProxy} \code{htmlwidget} object.
}
\description{
Use this in 'shiny' application to update an already generated cartogram.
}
\examples{
if (interactive()) {

library(topogram)
library(sf)
library(rnaturalearth)

wrld <- st_as_sf(countries110)
# doesn't support missing values !
wrld <- wrld[, c("name", "pop_est", "gdp_md_est")]
# Antarctica is not a whole polygon
wrld <- wrld[wrld$name != "Antarctica", ]

# add dummies vars
wrld$foo1 <- floor(runif(nrow(wrld), 500, 5000))
wrld$foo2 <- floor(runif(nrow(wrld), 500, 5000))
wrld$foo3 <- floor(runif(nrow(wrld), 500, 5000))
wrld$foo4 <- floor(runif(nrow(wrld), 500, 5000))

library(shiny)



#### Update with variable name

ui <- fluidPage(
  tags$h2("Update value use to distort topology"),
  tags$h4("Use a column name of the original data"),
  radioButtons(
    inputId = "new_value",
    label = "Update value:",
    choices = paste0("foo", 1:4),
    inline = TRUE
  ),
  topogramOutput(outputId = "world", height = "800px")
)

server <- function(input, output, session) {

  # Initialize the cartogram (non reactive)
  output$world <- renderTopogRam({
    topogram(
      shape = wrld,
      value = "foo1",
      tooltip_label = ~name,
      n_iteration = 10
    )
  })

  # Update variable used (foo1, foo2, foo3, foo4)
  observeEvent(input$new_value, {
    topogramProxy(shinyId = "world") \%>\%
      proxy_update_value(new_value = input$new_value)
  }, ignoreInit = TRUE)

}

shinyApp(ui, server)




#### Update with a numeric vector

ui <- fluidPage(
  tags$h2("Update value use to distort topology"),
  tags$h4("Use a vector to update data"),
  actionButton(inputId = "update", label = "Update !"),
  topogramOutput(outputId = "world", height = "800px")
)

server <- function(input, output, session) {

  # Initialize the cartogram (non reactive)
  output$world <- renderTopogRam({
    topogram(
      shape = wrld,
      value = "foo1",
      tooltip_label = ~name,
      n_iteration = 10
    )
  })

  # Update with a vector (must be same length as data used in topogram)
  observeEvent(input$update, {
    topogramProxy(shinyId = "world") \%>\%
      proxy_update_value(new_value = floor(runif(nrow(wrld), 500, 5000)))
  }, ignoreInit = TRUE)

}

shinyApp(ui, server)

}
}
