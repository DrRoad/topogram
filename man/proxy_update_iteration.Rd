% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shiny.R
\name{proxy_update_iteration}
\alias{proxy_update_iteration}
\title{Update number of iteration to distort topology}
\usage{
proxy_update_iteration(proxy, n_iteration)
}
\arguments{
\item{proxy}{A \code{topogramProxy} \code{htmlwidget} object.}

\item{n_iteration}{Number of iteration to perform.}
}
\value{
A \code{topogramProxy} \code{htmlwidget} object.
}
\description{
Use this in 'shiny' application to update an already generated cartogram.
}
\examples{
if (interactive()) {

library(topogram)
library(sf)
library(rnaturalearth)

wrld <- st_as_sf(countries110)
# doesn't support missing values !
wrld <- wrld[, c("name", "pop_est", "gdp_md_est")]
# Antarctica is not a whole polygon
wrld <- wrld[wrld$name != "Antarctica", ]

# add dummy vars
wrld$foo <- floor(runif(nrow(wrld), 500, 5000))


library(shiny)

library(shiny)

ui <- fluidPage(
  fluidRow(
    column(
      width = 10, offset = 1,
      tags$h2("topogram : update number of iterations with proxy"),
      sliderInput(
        inputId = "n_iteration", label = "Number of iteration (more takes longer)",
        min = 1, max = 60, value = 20
      ),
      topogramOutput(outputId = "carto", height = "600px")
    )
  )
)

server <- function(input, output, session) {

  # Initialize
  output$carto <- renderTopogRam({
    topogram(
      shape = wrld,
      value = "foo",
      tooltip_label = ~name,
      n_iteration = 20
    )
  })

  # Update
  observeEvent(input$n_iteration, {
    topogramProxy(shinyId = "carto") \%>\%
      proxy_update_iteration(n_iteration = input$n_iteration)
  }, ignoreInit = TRUE)

}

shinyApp(ui, server)

}
}
